---
title: "Assignment_2"
format: html
editor: visual
author: "DHRUV GAL - 35425822" 
---

## WELCOME

This is a demonstration file for Assignment 2. 

## Git Branch Demo

This section will change depending on the branch


## Example Plot

```{r}
plot(1:10, 1:10, main = "A Simple Plot")
```


## Step 2: Initialise Git and Push to GitHub

After setting up the RStudio project and writing this `example.qmd` file, I used the terminal to initialise version control using Git and connect it to a GitHub repository.

### Why this step matters:
Initialising Git allows version tracking of all changes made in the project. Connecting to GitHub enables cloud backup and collaboration.

### ðŸ’» Bash Commands Used:

```bash
# Initialise git repository
git init
```

### Stage all current files
```bash
git add .
```

### Make the first commit
```bash
git commit -m "Initial commit: setup project and added example.qmd"
```

### Add remote GitHub repository
```bash
git remote add origin https://github.com/YOUR_USERNAME/YOUR_REPO_NAME.git
```

### Rename branch to 'main'
```bash
git branch -M main
```

### Push changes to GitHub and set upstream
```bash
git push -u origin main
```




## Step 3: Create a New Branch and Make Changes

To simulate collaborative development, I created a new branch called `testbranch`, made a change to the `example.qmd` file, committed the update, and pushed the branch to GitHub.

### Why this step matters:
Using branches allows developers to experiment or work on features in isolation without affecting the main project. It supports safer collaboration and better version tracking.

### Bash Commands Used:

```bash
# Create and switch to a new branch
git checkout -b testbranch
```

### Edit example.qmd (e.g., add a new section)
### After saving the file, stage and commit the changes
```bash
git add example.qmd
git commit -m "Added new Git section in testbranch"
```

### Push the new branch to GitHub
```bash
git push -u origin testbranch
```


This is a line added in the test branch


